// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Quest.Persistance.Context;

#nullable disable

namespace Quest.Persistance.Migrations
{
    [DbContext(typeof(QuestContext))]
    [Migration("20241009063525_mig-1")]
    partial class mig1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Quest.Domain.Entities.Player", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Currency")
                        .HasColumnType("integer");

                    b.Property<int>("ExperiencePoints")
                        .HasColumnType("integer");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Players");
                });

            modelBuilder.Entity("Quest.Domain.Entities.PlayerItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("PlayerId")
                        .HasColumnType("uuid");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<Guid>("RewardItemId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId");

                    b.HasIndex("RewardItemId");

                    b.ToTable("PlayerItems");
                });

            modelBuilder.Entity("Quest.Domain.Entities.PlayerQuest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("PlayerId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("QuestId")
                        .HasColumnType("uuid");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId");

                    b.HasIndex("QuestId");

                    b.ToTable("PlayerQuests");
                });

            modelBuilder.Entity("Quest.Domain.Entities.QuestCondition", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("QuestId")
                        .HasColumnType("uuid");

                    b.Property<int>("RequiredValue")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("QuestId");

                    b.ToTable("QuestConditions");
                });

            modelBuilder.Entity("Quest.Domain.Entities.QuestProgress", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ConditionId")
                        .HasColumnType("uuid");

                    b.Property<int>("CurrentValue")
                        .HasColumnType("integer");

                    b.Property<Guid>("PlayerId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PlayerQuestId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("QuestId")
                        .HasColumnType("uuid");

                    b.Property<int>("TargetValue")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ConditionId");

                    b.HasIndex("PlayerQuestId");

                    b.ToTable("QuestProgresses");
                });

            modelBuilder.Entity("Quest.Domain.Entities.QuestRequirement", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("QuestId")
                        .HasColumnType("uuid");

                    b.Property<int>("RequiredAmount")
                        .HasColumnType("integer");

                    b.Property<string>("RequirementType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("QuestId");

                    b.ToTable("QuestRequirements");
                });

            modelBuilder.Entity("Quest.Domain.Entities.QuestReward", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Currency")
                        .HasColumnType("integer");

                    b.Property<int>("ExperiencePoints")
                        .HasColumnType("integer");

                    b.Property<Guid>("QuestId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("QuestId");

                    b.ToTable("QuestRewards");
                });

            modelBuilder.Entity("Quest.Domain.Entities.Quests", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("RequiredProgress")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Quests");
                });

            modelBuilder.Entity("Quest.Domain.Entities.RewardItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ItemName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<Guid?>("QuestRewardId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("QuestRewardId");

                    b.ToTable("RewardItems");
                });

            modelBuilder.Entity("Quest.Domain.Entities.PlayerItem", b =>
                {
                    b.HasOne("Quest.Domain.Entities.Player", "Player")
                        .WithMany("PlayerItems")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Quest.Domain.Entities.RewardItem", "RewardItem")
                        .WithMany()
                        .HasForeignKey("RewardItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");

                    b.Navigation("RewardItem");
                });

            modelBuilder.Entity("Quest.Domain.Entities.PlayerQuest", b =>
                {
                    b.HasOne("Quest.Domain.Entities.Player", "Player")
                        .WithMany("PlayerQuests")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Quest.Domain.Entities.Quests", "Quest")
                        .WithMany("PlayerQuests")
                        .HasForeignKey("QuestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");

                    b.Navigation("Quest");
                });

            modelBuilder.Entity("Quest.Domain.Entities.QuestCondition", b =>
                {
                    b.HasOne("Quest.Domain.Entities.Quests", "Quest")
                        .WithMany("Conditions")
                        .HasForeignKey("QuestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Quest");
                });

            modelBuilder.Entity("Quest.Domain.Entities.QuestProgress", b =>
                {
                    b.HasOne("Quest.Domain.Entities.QuestCondition", "Condition")
                        .WithMany("QuestProgresses")
                        .HasForeignKey("ConditionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Quest.Domain.Entities.PlayerQuest", "PlayerQuest")
                        .WithMany("Progress")
                        .HasForeignKey("PlayerQuestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Condition");

                    b.Navigation("PlayerQuest");
                });

            modelBuilder.Entity("Quest.Domain.Entities.QuestRequirement", b =>
                {
                    b.HasOne("Quest.Domain.Entities.Quests", "Quest")
                        .WithMany("QuestRequirements")
                        .HasForeignKey("QuestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Quest");
                });

            modelBuilder.Entity("Quest.Domain.Entities.QuestReward", b =>
                {
                    b.HasOne("Quest.Domain.Entities.Quests", "Quest")
                        .WithMany("QuestRewards")
                        .HasForeignKey("QuestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Quest");
                });

            modelBuilder.Entity("Quest.Domain.Entities.RewardItem", b =>
                {
                    b.HasOne("Quest.Domain.Entities.QuestReward", null)
                        .WithMany("RewardItems")
                        .HasForeignKey("QuestRewardId");
                });

            modelBuilder.Entity("Quest.Domain.Entities.Player", b =>
                {
                    b.Navigation("PlayerItems");

                    b.Navigation("PlayerQuests");
                });

            modelBuilder.Entity("Quest.Domain.Entities.PlayerQuest", b =>
                {
                    b.Navigation("Progress");
                });

            modelBuilder.Entity("Quest.Domain.Entities.QuestCondition", b =>
                {
                    b.Navigation("QuestProgresses");
                });

            modelBuilder.Entity("Quest.Domain.Entities.QuestReward", b =>
                {
                    b.Navigation("RewardItems");
                });

            modelBuilder.Entity("Quest.Domain.Entities.Quests", b =>
                {
                    b.Navigation("Conditions");

                    b.Navigation("PlayerQuests");

                    b.Navigation("QuestRequirements");

                    b.Navigation("QuestRewards");
                });
#pragma warning restore 612, 618
        }
    }
}
